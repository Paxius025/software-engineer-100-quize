[
  {
    "question": "ข้อใดคือหนึ่งในเนื้อหารายวิชาของวิศวกรรมซอฟต์แวร์",
    "options": [
      "การตลาดดิจิทัล",
      "การออกแบบวงจรไฟฟ้า",
      "การบริหารโครงการซอฟต์แวร์",
      "การบัญชีเบื้องต้น"
    ],
    "answer": "การบริหารโครงการซอฟต์แวร์"
  },
  {
    "question": "วัตถุประสงค์ของการเรียนรู้วิศวกรรมซอฟต์แวร์ข้อใด ไม่ถูกต้อง",
    "options": [
      "เพื่อให้ผู้เรียนมีความรู้ความเข้าใจเกี่ยวกับวิศวกรรมซอฟต์แวร์เบื้องต้น",
      "เพื่อให้ผู้เรียนเข้าใจในแนวทางการวิเคราะห์และบริหารความเสี่ยง",
      "เพื่อให้ผู้เรียนเชี่ยวชาญการเขียนโปรแกรมด้วยภาษา Python เท่านั้น",
      "เพื่อให้ผู้เรียนสามารถบอกประโยชน์และการนำหลักทางวิศวกรรมซอฟต์แวร์ไปประยุกต์ใช้งานได้"
    ],
    "answer": "เพื่อให้ผู้เรียนเชี่ยวชาญการเขียนโปรแกรมด้วยภาษา Python เท่านั้น"
  },
  {
    "question": "ซอฟต์แวร์ (Software) หมายถึงข้อใด",
    "options": [
      "อุปกรณ์อิเล็กทรอนิกส์สำหรับประมวลผลข้อมูล",
      "ชุดคำสั่งที่เรียงกันเป็นโปรแกรมคอมพิวเตอร์",
      "แผงวงจรหลักของคอมพิวเตอร์",
      "ส่วนประกอบทางกายภาพของระบบคอมพิวเตอร์"
    ],
    "answer": "ชุดคำสั่งที่เรียงกันเป็นโปรแกรมคอมพิวเตอร์"
  },
  {
    "question": "เป้าหมายหลักของการพัฒนาซอฟต์แวร์คือการได้ซอฟต์แวร์ที่มีคุณสมบัติตามข้อใด",
    "options": [
      "ราคาแพงและใช้ยาก",
      "ไม่สามารถปรับเปลี่ยนได้ง่าย",
      "มีประสิทธิภาพ ถูกต้อง เชื่อถือได้",
      "มีส่วนต่อประสานกับระบบอื่นไม่ได้"
    ],
    "answer": "มีประสิทธิภาพ ถูกต้อง เชื่อถือได้"
  },
  {
    "question": "ข้อใดคือประเภทของซอฟต์แวร์ที่สร้างขึ้นเพื่อบริการโปรแกรมอื่นให้ติดต่อกับฮาร์ดแวร์",
    "options": [
      "ซอฟต์แวร์ระบบ (System Software)",
      "ซอฟต์แวร์ประยุกต์ (Application Software)",
      "ซอฟต์แวร์สำเร็จรูป (Package Software)",
      "ซอฟต์แวร์ใช้งานเฉพาะ (Specific Software)"
    ],
    "answer": "ซอฟต์แวร์ระบบ (System Software)"
  },
  {
    "question": "ซอฟต์แวร์ระบบ (System Software) แบ่งออกเป็นกี่ประเภทตามที่ระบุในแหล่งข้อมูล",
    "options": [
      "2 ประเภท",
      "3 ประเภท",
      "4 ประเภท",
      "5 ประเภท"
    ],
    "answer": "4 ประเภท"
  },
  {
    "question": "ข้อใดคือตัวอย่างของซอฟต์แวร์ระบบ (System Software)",
    "options": [
      "Microsoft Word",
      "ระบบบริหารจัดการน้ำ",
      "ตัวแปลภาษา (Compiler)",
      "ระบบบัญชี"
    ],
    "answer": "ตัวแปลภาษา (Compiler)"
  },
  {
    "question": "ซอฟต์แวร์ประยุกต์ (Application Software) แบ่งเป็น 2 ประเภทหลัก ได้แก่ข้อใด",
    "options": [
      "ซอฟต์แวร์ระบบและซอฟต์แวร์โอเพนซอร์ส",
      "ซอฟต์แวร์วิทยาศาสตร์และซอฟต์แวร์ปัญญาประดิษฐ์",
      "ซอฟต์แวร์สำเร็จ (Package Software) และซอฟต์แวร์ใช้งานเฉพาะ (Specific Software)",
      "ซอฟต์แวร์แบบฝังตัวและซอฟต์แวร์แบบสายการผลิต"
    ],
    "answer": "ซอฟต์แวร์สำเร็จ (Package Software) และซอฟต์แวร์ใช้งานเฉพาะ (Specific Software)"
  },
  {
    "question": "วิศวกรรมซอฟต์แวร์ (Software Engineering) หมายถึงอะไร",
    "options": [
      "การสร้างโปรแกรมคอมพิวเตอร์โดยไม่มีแบบแผน",
      "การนำหลักวิชาการทางด้านวิศวกรรมมาดูแลกระบวนการผลิตซอฟต์แวร์ตั้งแต่ขั้นตอนแรกจนถึงการบำรุงรักษา",
      "การออกแบบฮาร์ดแวร์สำหรับซอฟต์แวร์",
      "การติดตั้งซอฟต์แวร์บนเครื่องคอมพิวเตอร์เท่านั้น"
    ],
    "answer": "การนำหลักวิชาการทางด้านวิศวกรรมมาดูแลกระบวนการผลิตซอฟต์แวร์ตั้งแต่ขั้นตอนแรกจนถึงการบำรุงรักษา"
  },
  {
    "question": "ข้อใดคือหนึ่งในปัญหาที่มักพบเจอในการพัฒนาซอฟต์แวร์ที่นำไปสู่วิกฤตซอฟต์แวร์",
    "options": [
      "มีจำนวนวิศวกรซอฟต์แวร์มืออาชีพมากเกินไป",
      "ปัญหาเรื่องของต้นทุนค่าใช้จ่ายสูง",
      "การพัฒนาซอฟต์แวร์อย่างมืออาชีพและถูกแบบแผน",
      "การปรับปรุงกระบวนการผลิตอย่างต่อเนื่อง"
    ],
    "answer": "ปัญหาเรื่องของต้นทุนค่าใช้จ่ายสูง"
  },
  {
    "question": "องค์การใดที่มีการจัดสัมมนาวิศวกรรมซอฟต์แวร์ครั้งแรกในปี 1968 ซึ่งเป็นจุดประกายให้เป็นที่รู้จักกันอย่างแพร่หลาย",
    "options": [
      "UNESCO",
      "UN",
      "องค์การนาโต้ (NATO)",
      "WTO"
    ],
    "answer": "องค์การนาโต้ (NATO)"
  },
  {
    "question": "องค์ประกอบของวิศวกรรมซอฟต์แวร์ที่สำคัญ 2 ส่วน ได้แก่ข้อใด",
    "options": [
      "วิศวกรรมฮาร์ดแวร์และวิศวกรรมเครือข่าย",
      "วิศวกรรมระบบ (System Engineering) และวิศวกรรมการผลิต (Development Engineering)",
      "วิศวกรรมซอฟต์แวร์และการจัดการฐานข้อมูล",
      "วิศวกรรมไฟฟ้าและวิศวกรรมโยธา"
    ],
    "answer": "วิศวกรรมระบบ (System Engineering) และวิศวกรรมการผลิต (Development Engineering)"
  },
  {
    "question": "การกำหนดวัตถุประสงค์และขอบเขตของระบบ รวมถึงการพิจารณาความสัมพันธ์ของส่วนประกอบต่างๆ เป็นหน้าที่หลักขององค์ประกอบใดในวิศวกรรมซอฟต์แวร์",
    "options": [
      "วิศวกรรมการผลิต (Development Engineering)",
      "วิศวกรรมระบบ (System Engineering)",
      "วิศวกรรมเครือข่าย",
      "วิศวกรรมฐานข้อมูล"
    ],
    "answer": "วิศวกรรมระบบ (System Engineering)"
  },
  {
    "question": "การกำหนดความต้องการและจัดทำข้อกำหนดคุณสมบัติซอฟต์แวร์ (SRS Document) เป็นหน้าที่หลักขององค์ประกอบใดในวิศวกรรมซอฟต์แวร์",
    "options": [
      "วิศวกรรมระบบ (System Engineering)",
      "วิศวกรรมการผลิต (Development Engineering)",
      "การทดสอบซอฟต์แวร์",
      "การบำรุงรักษาซอฟต์แวร์"
    ],
    "answer": "วิศวกรรมการผลิต (Development Engineering)"
  },
  {
    "question": "วัฏจักรชีวิตของการพัฒนาซอฟต์แวร์ (Software Development Life Cycle: SDLC) แบ่งออกเป็นกี่ขั้นตอนตามที่ระบุในแหล่งข้อมูล",
    "options": [
      "4 ขั้นตอน",
      "5 ขั้นตอน",
      "6 ขั้นตอน",
      "7 ขั้นตอน"
    ],
    "answer": "6 ขั้นตอน"
  },
  {
    "question": "ข้อใดคือหนึ่งในปัจจัยสำคัญที่ทำให้โครงการซอฟต์แวร์ประสบความสำเร็จ (Key Success Factor)",
    "options": [
      "การสื่อสารที่ดี",
      "ความต้องการของลูกค้าไม่ชัดเจน",
      "การใช้เวลาในการพัฒนาที่ยาวนานเกินไป",
      "การไม่จัดทำเอกสารใดๆ"
    ],
    "answer": "การสื่อสารที่ดี"
  },
  {
    "question": "ข้อใด ไม่ใช่ คุณลักษณะของซอฟต์แวร์ที่มีคุณภาพตามที่ระบุในแหล่งข้อมูล",
    "options": [
      "ประสิทธิภาพ (Performance)",
      "ความปลอดภัย (Security)",
      "ความพร้อมใช้งาน (Availability)",
      "ต้นทุนการผลิตสูง"
    ],
    "answer": "ต้นทุนการผลิตสูง"
  },
  {
    "question": "ระเบียบวิธีปฏิบัติทางด้านวิศวกรรมซอฟต์แวร์ แบ่งเป็น 2 แนวทางหลัก ได้แก่ข้อใด",
    "options": [
      "แนวทางเชิงวิวัฒนาการและแนวทางเชิงขนาน",
      "แนวทางเชิงโครงสร้าง (Structured Approach) และแนวทางเชิงวัตถุ (Object-Oriented Approach)",
      "แนวทางเชิงเส้นและแนวทางเชิงวนซ้ำ",
      "แนวทางแบบเป็นระบบและแนวทางแบบไม่เป็นระบบ"
    ],
    "answer": "แนวทางเชิงโครงสร้าง (Structured Approach) และแนวทางเชิงวัตถุ (Object-Oriented Approach)"
  },
  {
    "question": "การวิเคราะห์และออกแบบระบบเชิงโครงสร้าง (Structured System Analysis and Design: SSAD) คิดค้นโดยใคร",
    "options": [
      "Grady Booch, James Rumbaugh และ Ivar Jacobson",
      "Yourdan & DeMarco",
      "Pressman",
      "Sommerville"
    ],
    "answer": "Yourdan & DeMarco"
  },
  {
    "question": "ข้อใดคือข้อดีของการใช้แนวทางเชิงวัตถุ (Object-Oriented Approach) ในการวิเคราะห์และออกแบบระบบ",
    "options": [
      "ใช้เวลานานกว่า",
      "รองรับระบบงานที่ซับซ้อนและทันต่อการเปลี่ยนแปลงความต้องการ",
      "โครงสร้างเป็นแบบลำดับชั้น",
      "มีการจัดทำเอกสารน้อยกว่า"
    ],
    "answer": "รองรับระบบงานที่ซับซ้อนและทันต่อการเปลี่ยนแปลงความต้องการ"
  },
  {
    "question": "ข้อใดคือประโยชน์ของวิศวกรรมซอฟต์แวร์",
    "options": [
      "ทำให้กระบวนการผลิตซอฟต์แวร์ไม่มีมาตรฐาน",
      "กระบวนการผลิตซอฟต์แวร์มีประสิทธิภาพและเป็นระบบ",
      "ไม่มีการตรวจสอบคุณภาพซอฟต์แวร์ก่อนส่งมอบ",
      "ทำให้งานดำเนินต่อไม่ได้หากเปลี่ยนทีมงาน"
    ],
    "answer": "กระบวนการผลิตซอฟต์แวร์มีประสิทธิภาพและเป็นระบบ"
  },
  {
    "question": "ข้อใดคือหนึ่งในกิจกรรมพื้นฐาน 4 กิจกรรมของ Software Process ตามแนวคิดของ Sommerville, 2011",
    "options": [
      "Software validation",
      "Software marketing",
      "Software sales",
      "Software financing"
    ],
    "answer": "Software validation"
  },
  {
    "question": "แบบจำลองกระบวนการพัฒนาซอฟต์แวร์ประเภทใดที่มีลักษณะเป็นขั้นตอนลำดับ และแต่ละขั้นตอนต้องเสร็จสิ้นก่อนเริ่มขั้นตอนถัดไป",
    "options": [
      "แบบจำลองส่วนเพิ่ม (Incremental Model)",
      "แบบจำลองแบบเร่งรัด (Rapid Application Development: RAD Model)",
      "แบบจำลองน้ำตก (Waterfall Model)",
      "แบบจำลองเวียนก้นหอย (Spiral Model)"
    ],
    "answer": "แบบจำลองน้ำตก (Waterfall Model)"
  },
  {
    "question": "แบบจำลองกระบวนการพัฒนาซอฟต์แวร์ใดที่เหมาะสำหรับโครงการขนาดเล็กและทำใช้เอง เนื่องจากไม่มีการวางแผนและการจัดการที่ดี",
    "options": [
      "แบบจำลองน้ำตก",
      "แบบจำลองแบบเร่งรัด",
      "แบบจำลองเวียนก้นหอย",
      "แบบไม่เป็นระบบ"
    ],
    "answer": "แบบไม่เป็นระบบ"
  },
  {
    "question": "แบบจำลองกระบวนการพัฒนาซอฟต์แวร์ใดที่มีการนำระบบงานออกเป็นระบบย่อยต่างๆ และพัฒนาตามลำดับจนกระทั่งได้ระบบงานที่สมบูรณ์",
    "options": [
      "แบบจำลองน้ำตก",
      "แบบจำลองส่วนเพิ่ม (Incremental Model)",
      "แบบจำลองเวียนก้นหอย (Spiral Model)",
      "แบบจำลอง Rational Unified Process"
    ],
    "answer": "แบบจำลองส่วนเพิ่ม (Incremental Model)"
  },
  {
    "question": "แบบจำลองใดที่เริ่มต้นให้ความสำคัญกับลูกค้าต่อการเปลี่ยนแปลงความต้องการ สื่อสารมากขึ้น มีต้นแบบของระบบให้เห็นในเวลาอันสั้น",
    "options": [
      "แบบจำลองน้ำตก (Waterfall Model)",
      "แบบจำลองส่วนเพิ่ม (Incremental Model)",
      "แบบจำลองเร่งรัด (Rapid Application Development: RAD Model)",
      "แบบจำลองเชิงวิวัฒนาการหรือต้นแบบ (Evolutionary Model / Prototyping)"
    ],
    "answer": "แบบจำลองเชิงวิวัฒนาการหรือต้นแบบ (Evolutionary Model / Prototyping)"
  },
  {
    "question": "แบบจำลองใดที่รวมเอาลักษณะของการสร้างต้นแบบของ Prototyping Model เข้ากับการทำงานอย่างเป็นขั้นตอนและมีการควบคุมของ Waterfall Model",
    "options": [
      "แบบจำลองส่วนเพิ่ม (Incremental Model)",
      "แบบจำลองเร่งรัด (Rapid Application Development: RAD Model)",
      "แบบจำลองเวียนก้นหอย (Spiral Model)",
      "แบบจำลอง Rational Unified Process"
    ],
    "answer": "แบบจำลองเวียนก้นหอย (Spiral Model)"
  },
  {
    "question": "แบบจำลอง Rational Unified Process (RUP) ใช้แนวคิดเชิงใดในการกำหนดรายละเอียดของการทำงาน",
    "options": [
      "แนวคิดเชิงโครงสร้าง",
      "แนวคิดเชิงวัตถุ",
      "แนวคิดเชิงฟังก์ชัน",
      "แนวคิดเชิงข้อมูล"
    ],
    "answer": "แนวคิดเชิงวัตถุ"
  },
  {
    "question": "วงจรชีวิตที่ใช้ในการพัฒนาระบบแบบ RUP ประกอบด้วย 4 เฟส ได้แก่ข้อใด",
    "options": [
      "Design, Code, Test, Deploy",
      "Plan, Execute, Monitor, Close",
      "Inception, Elaboration, Construction, Transition",
      "Communication, Planning, Modeling, Construction"
    ],
    "answer": "Inception, Elaboration, Construction, Transition"
  },
  {
    "question": "DevOps คือวิธีการพัฒนาซอฟต์แวร์ที่เน้นความร่วมมือใกล้ชิดระหว่างทีมใด",
    "options": [
      "ทีมการตลาดและทีมขาย",
      "ทีมบัญชีและทีมบริหาร",
      "ทีมพัฒนา (Development Teams) และทีมดำเนินงาน (Operation Teams)",
      "ทีมวิจัยและทีมพัฒนาผลิตภัณฑ์"
    ],
    "answer": "ทีมพัฒนา (Development Teams) และทีมดำเนินงาน (Operation Teams)"
  },
  {
    "question": "ก่อนเริ่มโครงการ วิศวกรซอฟต์แวร์ควรพิจารณาเลือกแบบจำลองที่เหมาะสม โดยต้องพิจารณาปัจจัยใดบ้าง",
    "options": [
      "งบประมาณที่ได้รับเท่านั้น",
      "จำนวนพนักงานในทีมเท่านั้น",
      "ความต้องการ ความเสี่ยง เทคนิคการใช้งาน ขอบเขตองค์ความรู้ และจุดมุ่งเน้น",
      "ชื่อเสียงของบริษัทผู้ว่าจ้างเท่านั้น"
    ],
    "answer": "ความต้องการ ความเสี่ยง เทคนิคการใช้งาน ขอบเขตองค์ความรู้ และจุดมุ่งเน้น"
  },
  {
    "question": "ข้อใดคือความหมายของคำว่า \"Deploy\" ในบริบทของการพัฒนาซอฟต์แวร์",
    "options": [
      "การเริ่มต้นโปรเจกต์",
      "การทดสอบการทำงานของระบบ",
      "การนำระบบไปใช้งานจริง",
      "การบำรุงรักษาระบบ"
    ],
    "answer": "การนำระบบไปใช้งานจริง"
  },
  {
    "question": "Agile แปลว่าอะไร",
    "options": [
      "ซับซ้อน",
      "คล่องแคล่ว ว่องไว",
      "ช้า",
      "ตายตัว"
    ],
    "answer": "คล่องแคล่ว ว่องไว"
  },
  {
    "question": "ข้อใดคือหนึ่งในคำประกาศ (Manifesto) ที่สำคัญ 4 ข้อของ Agile",
    "options": [
      "เน้นการทำเอกสารที่ครอบคลุมมากกว่าซอฟต์แวร์ที่ใช้งานได้",
      "เน้นการสื่อสารและปฏิสัมพันธ์กันระหว่างคน มากกว่าเครื่องมือต่างๆ ที่นำมาช่วย",
      "เน้นการทำตามแผนที่วางไว้มากกว่าการปรับปรุงพัฒนา",
      "เน้นการเจรจาสัญญามากกว่าการตอบสนองผู้ใช้งาน"
    ],
    "answer": "เน้นการสื่อสารและปฏิสัมพันธ์กันระหว่างคน มากกว่าเครื่องมือต่างๆ ที่นำมาช่วย"
  },
  {
    "question": "User Story ประกอบด้วยกี่ส่วนหลักๆ",
    "options": [
      "2 ส่วน",
      "3 ส่วน",
      "4 ส่วน",
      "5 ส่วน"
    ],
    "answer": "3 ส่วน"
  },
  {
    "question": "ข้อใดคือบทบาทของผู้ที่ออกแบบผลิตภัณฑ์เพื่อตอบสนอง Stakeholders ในทีม Agile",
    "options": [
      "Developer",
      "Scrum Master",
      "Product Owner (PO)",
      "Stakeholders"
    ],
    "answer": "Product Owner (PO)"
  },
  {
    "question": "ข้อใดคือหลักการจัดลำดับความสำคัญของงานแบบ Agile สำหรับงานที่สำคัญและด่วน",
    "options": [
      "งานที่ต้องทำทันที ถ้าไม่เสร็จอาจเกิดปัญหาใหญ่",
      "งานที่ไม่ควรมี หรือทำในเวลาว่าง",
      "งานที่ให้คนอื่นทำแทนได้",
      "งานที่สำคัญรองลงมา ไม่ต้องทำทันทีแต่ต้องลงเวลาว่าจะทำเมื่อไหร่"
    ],
    "answer": "งานที่ต้องทำทันที ถ้าไม่เสร็จอาจเกิดปัญหาใหญ่"
  },
  {
    "question": "Scrum คืออะไร",
    "options": [
      "แนวคิดในการทำงานแบบ Waterfall",
      "การนำแนวคิดในการทำงานแบบ Agile มาปฏิบัติโดยมีขั้นตอนเฉพาะ",
      "เครื่องมือบริหารโครงการแบบ Linear",
      "กระบวนการพัฒนาซอฟต์แวร์ที่ไม่ต้องสื่อสารกันในทีม"
    ],
    "answer": "การนำแนวคิดในการทำงานแบบ Agile มาปฏิบัติโดยมีขั้นตอนเฉพาะ"
  },
  {
    "question": "ช่วงเวลาในการดำเนินงานที่เมื่อจบแล้วจะต้องได้รับชิ้นงานตามที่วางแผนไว้ และสามารถนำไปส่งมอบให้แก่ผู้ใช้ได้ใน Scrum เรียกว่าอะไร",
    "options": [
      "Product Backlog",
      "Sprint Backlog",
      "Sprint",
      "User Story"
    ],
    "answer": "Sprint"
  },
  {
    "question": "ข้อใด ไม่ใช่ กิจกรรมหลักของ Scrum (Scrum Events)",
    "options": [
      "วางแผนสปรินท์ (Sprint Planning)",
      "สกรัมประจำวัน (Daily Scrum)",
      "ตรวจสอบผลลัพธ์ของสปรินท์ (Sprint Review)",
      "การวางแผนงบประมาณรายปี"
    ],
    "answer": "การวางแผนงบประมาณรายปี"
  },
  {
    "question": "การประชุมประจำวันที่เน้นให้ Developer แจ้งความคืบหน้าในการพัฒนางานแก่กัน และใช้เวลาไม่เกิน 15 นาที ใน Scrum เรียกว่าอะไร",
    "options": [
      "Sprint Planning",
      "Daily Scrum",
      "Sprint Review",
      "Sprint Retrospective"
    ],
    "answer": "Daily Scrum"
  },
  {
    "question": "การตรวจสอบการดำเนินงานในสปรินท์ที่จบลง ทั้งในเรื่องของทีมงาน ความสัมพันธ์ภายในทีม ความรู้ เครื่องมือ สภาพแวดล้อมในการทำงาน ใน Scrum เรียกว่าอะไร",
    "options": [
      "Sprint Planning",
      "Daily Scrum",
      "Sprint Review",
      "Sprint Retrospective"
    ],
    "answer": "Sprint Retrospective"
  },
  {
    "question": "การบริหารโครงการ (Project Management) คืออะไร",
    "options": [
      "การดำเนินการกิจกรรมตามแผนที่จัดทำขึ้นเพื่อให้บรรลุเป้าหมายเท่านั้น",
      "การจัดการทรัพยากรบุคคลในองค์กร",
      "การประยุกต์ใช้องค์ความรู้ ทักษะ เครื่องมือ และเทคนิค เพื่อดำเนินกิจกรรมตามความต้องการของโครงการให้บรรลุวัตถุประสงค์",
      "การวิเคราะห์และออกแบบระบบโดยไม่คำนึงถึงเวลาและต้นทุน"
    ],
    "answer": "การประยุกต์ใช้องค์ความรู้ ทักษะ เครื่องมือ และเทคนิค เพื่อดำเนินกิจกรรมตามความต้องการของโครงการให้บรรลุวัตถุประสงค์"
  },
  {
    "question": "เป้าหมายหลักของการบริหารโครงการซอฟต์แวร์คือการพัฒนาซอฟต์แวร์ที่สร้างความพึงพอใจ ได้รับการยอมรับจากลูกค้า มีคุณภาพสูง ความปลอดภัยสูง ค่าใช้จ่ายต่ำ และเสร็จภายในเวลาที่กำหนด รวมถึงข้อใด",
    "options": [
      "จัดสรรเครื่องมือและทรัพยากรทั้งหมดให้เกิดประโยชน์สูงสุด",
      "ใช้ทรัพยากรให้มากที่สุดเท่าที่จะทำได้",
      "ไม่ต้องมีการบำรุงรักษาในอนาคต",
      "เน้นที่การทำกำไรสูงสุดเท่านั้น"
    ],
    "answer": "จัดสรรเครื่องมือและทรัพยากรทั้งหมดให้เกิดประโยชน์สูงสุด"
  },
  {
    "question": "ข้อใดคือหนึ่งในทักษะและคุณสมบัติที่จำเป็นสำหรับ Project Manager",
    "options": [
      "ทักษะการเขียนโค้ดขั้นสูง",
      "ทักษะความเป็นผู้นำ (Leadership)",
      "ทักษะการออกแบบกราฟิก",
      "ทักษะการตลาดออนไลน์"
    ],
    "answer": "ทักษะความเป็นผู้นำ (Leadership)"
  },
  {
    "question": "ใบรับรองวิชาชีพใดที่จัดอยู่ในสายบริหารโปรเจกต์แบบ Traditional (Waterfall)",
    "options": [
      "PMI Agile Certified Practitioner (PMI-ACP)®",
      "Certified ScrumMaster® (CSM®)",
      "Scaled Agile Framework Certification (SAFe)",
      "Project Management Professional (PMP)®"
    ],
    "answer": "Project Management Professional (PMP)®"
  },
  {
    "question": "เส้นทางการพัฒนาในสายอาชีพ Project Manager ระดับใดที่เน้นไปในเรื่องของการเป็น \"ผู้ให้คำปรึกษาและผู้สอน\" PM มือใหม่",
    "options": [
      "Senior Level",
      "เส้นทางสาย People (People path)",
      "เส้นทางสาย Process (Process path)",
      "เส้นทางสาย Program (Program path)"
    ],
    "answer": "เส้นทางสาย People (People path)"
  },
  {
    "question": "การบริหารโครงการ 4P ประกอบด้วยอะไรบ้าง",
    "options": [
      "Product, Price, Place, Promotion",
      "ปัญหา (Problem), คน (People), โครงการ (Project), กระบวนการ (Process)",
      "Plan, Progress, Performance, Profit",
      "People, Process, Product, Project Management"
    ],
    "answer": "ปัญหา (Problem), คน (People), โครงการ (Project), กระบวนการ (Process)"
  },
  {
    "question": "วัฏจักรชีวิตของโครงการซอฟต์แวร์ (Software Project Life Cycle: SPLC) มีกี่ขั้นตอนหลัก",
    "options": [
      "3 ขั้นตอน",
      "4 ขั้นตอน",
      "5 ขั้นตอน",
      "6 ขั้นตอน"
    ],
    "answer": "4 ขั้นตอน"
  },
  {
    "question": "การดำเนินโครงการซอฟต์แวร์ (Software Project Execution) ใน SPLC คือขั้นตอนใด",
    "options": [
      "การกำหนดเวลาเริ่มต้นและสิ้นสุดโครงการ",
      "การจัดทำข้อเสนอโครงการ",
      "การลงมือปฏิบัติงานตามแผนที่กำหนด",
      "การสอบถามความพึงพอใจหลังติดตั้งซอฟต์แวร์"
    ],
    "answer": "การลงมือปฏิบัติงานตามแผนที่กำหนด"
  },
  {
    "question": "กระบวนการของการบริหารโครงการซอฟต์แวร์ (Project Management Process) ประกอบด้วยกี่ขั้นตอนหลัก",
    "options": [
      "2 ขั้นตอน",
      "3 ขั้นตอน",
      "4 ขั้นตอน",
      "5 ขั้นตอน"
    ],
    "answer": "4 ขั้นตอน"
  },
  {
    "question": "การระบุและวิเคราะห์ความเสี่ยงที่อาจเกิดขึ้นกับโครงการซอฟต์แวร์เป็นส่วนหนึ่งของกระบวนการใดในการบริหารโครงการ",
    "options": [
      "การจัดระเบียบโครงการ (Project Organizing)",
      "การวางแผนโครงการ (Project Planning)",
      "การติดตามสถานะโครงการ (Project Monitoring)",
      "การปรับเปลี่ยนโครงการ (Project Adjusting)"
    ],
    "answer": "การวางแผนโครงการ (Project Planning)"
  },
  {
    "question": "Project Charter คืออะไร",
    "options": [
      "เอกสารที่ใช้ในการระบุขอบเขตของงาน กรอบเวลา และรายละเอียดอื่นๆ ของโปรเจกต์",
      "เอกสารที่ใช้บันทึกผลการทดสอบซอฟต์แวร์",
      "รายงานสรุปผลกำไรขาดทุนของโครงการ",
      "แผนผังองค์กรของทีมพัฒนา"
    ],
    "answer": "เอกสารที่ใช้ในการระบุขอบเขตของงาน กรอบเวลา และรายละเอียดอื่นๆ ของโปรเจกต์"
  },
  {
    "question": "ใน RACI Matrix ตัวอักษร 'R' ย่อมาจากอะไร",
    "options": [
      "Responsible (ผู้มีอำนาจตัดสินใจ)",
      "Responsible (ผู้รับผิดชอบหลักในการลงมือทำ)",
      "Reviewer (ผู้ตรวจสอบ)",
      "Reporter (ผู้รายงาน)"
    ],
    "answer": "Responsible (ผู้รับผิดชอบหลักในการลงมือทำ)"
  },
  {
    "question": "ใน RACI Matrix ตัวอักษร 'A' ย่อมาจากอะไร",
    "options": [
      "Accountable (ผู้มีอำนาจตัดสินใจและรับผิดชอบผลลัพธ์สุดท้าย)",
      "Advisor (ผู้ให้คำแนะนำ)",
      "Approval (ผู้ให้การอนุมัติ)",
      "Action (การกระทำ)"
    ],
    "answer": "Accountable (ผู้มีอำนาจตัดสินใจและรับผิดชอบผลลัพธ์สุดท้าย)"
  },
  {
    "question": "Work Breakdown Structure (WBS) เป็นเทคนิคที่ใช้ในการแตกย่อยเนื้องานจาก Requirement ชิ้นใหญ่ๆ โดยใช้วิธีการแตกงานแบบใด",
    "options": [
      "Function-based (การแตกงานตามฟังก์ชัน)",
      "Deliverable-based (การแตกงานในมุมส่งมอบชิ้นงาน)",
      "Time-based (การแตกงานตามเวลา)",
      "Resource-based (การแตกงานตามทรัพยากร)"
    ],
    "answer": "Deliverable-based (การแตกงานในมุมส่งมอบชิ้นงาน)"
  },
  {
    "question": "เทคนิคการประเมินงานแบบใดที่ใช้หลักการเทียบขนาดของงานกับขนาดของเสื้อ (XS, S, M, L, XL)",
    "options": [
      "Top-Down",
      "Relative Sizing",
      "Bottom-Up",
      "Expert Judgment"
    ],
    "answer": "Relative Sizing"
  },
  {
    "question": "ข้อใด ไม่ใช่ ปัจจัยของการประมาณการราคาซอฟต์แวร์",
    "options": [
      "Size (ขนาด)",
      "Schedule (ระยะเวลาแล้วเสร็จโครงการ)",
      "Other (ขึ้นอยู่กับสภาพแวดล้อม)",
      "จำนวนผู้ใช้งานปลายทาง"
    ],
    "answer": "จำนวนผู้ใช้งานปลายทาง"
  },
  {
    "question": "การวัดขนาดของซอฟต์แวร์ด้วย Line of Code (LOC) คืออะไร",
    "options": [
      "การนับจำนวนบรรทัดโปรแกรม",
      "การนับจำนวนฟังก์ชัน",
      "การประมาณการโดยผู้เชี่ยวชาญ",
      "การเปรียบเทียบกับซอฟต์แวร์ประเภทเดียวกัน"
    ],
    "answer": "การนับจำนวนบรรทัดโปรแกรม"
  },
  {
    "question": "งบประมาณสำรองที่ Project Sponsor จะสำรองไว้ให้ Project Manager เผื่อเหตุฉุกเฉิน เรียกว่าอะไร",
    "options": [
      "Project Budget",
      "Cost Baseline",
      "Management Reserve",
      "Work Package Cost Estimate"
    ],
    "answer": "Management Reserve"
  },
  {
    "question": "ข้อใดคือความหมายของ Milestone",
    "options": [
      "ผลลัพธ์ที่จะส่งมอบให้ลูกค้าในแต่ละขั้นตอน",
      "เป้าหมายของกิจกรรมที่มีประโยชน์ต่อการติดตามความก้าวหน้า",
      "กิจกรรมย่อยที่ต้องทำให้เสร็จก่อน",
      "เอกสารสรุปงบประมาณ"
    ],
    "answer": "เป้าหมายของกิจกรรมที่มีประโยชน์ต่อการติดตามความก้าวหน้า"
  },
  {
    "question": "แผนงานใดที่มีการใส่ระยะเวลาที่ดำเนินงานจริง ๆ บนปฏิทินงาน และมีความละเอียดของแต่ละงาน/กิจกรรมสูง",
    "options": [
      "Roadmap",
      "Gantt Chart",
      "PERT/CPM",
      "Flow Chart"
    ],
    "answer": "Gantt Chart"
  },
  {
    "question": "Dependency ในการจัดการโครงการซอฟต์แวร์คืออะไร",
    "options": [
      "ตัวชี้วัดที่บอกถึง \"ความสัมพันธ์เกี่ยวเนื่องของการเริ่มงาน/กิจกรรมหนึ่ง\" ที่ต้องรอ Input อื่น",
      "ระยะเวลาที่ยาวที่สุดตั้งแต่เริ่มต้นจนถึงจุดสำเร็จของโปรเจกต์",
      "การจัดสรรบุคลากรให้เหมาะสมกับงาน",
      "การประเมินความพึงพอใจของลูกค้า"
    ],
    "answer": "ตัวชี้วัดที่บอกถึง \"ความสัมพันธ์เกี่ยวเนื่องของการเริ่มงาน/กิจกรรมหนึ่ง\" ที่ต้องรอ Input อื่น"
  },
  {
    "question": "Precedence Relationship ประเภทใดที่ Successor ไม่สามารถเริ่มงานได้ถ้า Predecessor ยังไม่เสร็จ",
    "options": [
      "Start to Start (SS)",
      "Finish to Start (FS)",
      "Finish to Finish (FF)",
      "Start to Finish (SF)"
    ],
    "answer": "Finish to Start (FS)"
  },
  {
    "question": "Critical Path คืออะไรในหลัก Project Management",
    "options": [
      "กิจกรรมที่ทำพร้อมกันได้",
      "เส้นทางที่สั้นที่สุดในการทำโปรเจกต์",
      "ช่วงระยะเวลาที่ยาวที่สุดตั้งแต่จุดเริ่มต้นไปจนถึงจุดสำเร็จของโปรเจกต์",
      "กิจกรรมที่ไม่จำเป็นต้องทำ"
    ],
    "answer": "ช่วงระยะเวลาที่ยาวที่สุดตั้งแต่จุดเริ่มต้นไปจนถึงจุดสำเร็จของโปรเจกต์"
  },
  {
    "question": "วิศวกรรมความต้องการ (Requirement Engineering : RE) หมายถึงอะไร",
    "options": [
      "กระบวนการทดสอบซอฟต์แวร์เท่านั้น",
      "กระบวนการที่ทำให้วิศวกรซอฟต์แวร์เข้าใจและเข้าถึงความต้องการของลูกค้าได้อย่างถูกต้อง",
      "กระบวนการบำรุงรักษาซอฟต์แวร์",
      "กระบวนการบริหารจัดการโครงการเท่านั้น"
    ],
    "answer": "กระบวนการที่ทำให้วิศวกรซอฟต์แวร์เข้าใจและเข้าถึงความต้องการของลูกค้าได้อย่างถูกต้อง"
  },
  {
    "question": "ความต้องการซอฟต์แวร์แบ่งเป็นกี่ระดับหลัก",
    "options": [
      "1 ระดับ",
      "2 ระดับ",
      "3 ระดับ",
      "4 ระดับ"
    ],
    "answer": "2 ระดับ"
  },
  {
    "question": "ความต้องการประเภทใดที่เกี่ยวข้องโดยตรงกับฟังก์ชันหลักของระบบ ซอฟต์แวร์ทำหน้าที่ตามที่กำหนดไว้ในส่วนของการทำงานหรือบริการที่ลูกค้าหรือผู้ใช้ต้องการ",
    "options": [
      "ความต้องการเชิงฟังก์ชัน (Functional Requirement)",
      "ความต้องการไม่เป็นฟังก์ชัน (Non-Functional Requirement)",
      "ความต้องการโดเมน (Domain Requirement)",
      "ความต้องการด้านผลิตภัณฑ์"
    ],
    "answer": "ความต้องการเชิงฟังก์ชัน (Functional Requirement)"
  },
  {
    "question": "การระบุความต้องการที่มาจากนโยบายและระเบียบปฏิบัติของทีมนักพัฒนาซอฟต์แวร์และลูกค้า เป็นส่วนหนึ่งของความต้องการประเภทใด",
    "options": [
      "ความต้องการผลิตภัณฑ์ (Product Requirements)",
      "ความต้องการองค์กร (Organizational Requirements)",
      "ความต้องการภายนอก (External Requirements)",
      "ความต้องการเชิงฟังก์ชัน (Functional Requirement)"
    ],
    "answer": "ความต้องการองค์กร (Organizational Requirements)"
  },
  {
    "question": "กระบวนการของวิศวกรรมความต้องการ (Requirement Engineering Process) ประกอบด้วยกี่ขั้นตอนหลัก",
    "options": [
      "2 ขั้นตอน",
      "3 ขั้นตอน",
      "4 ขั้นตอน",
      "5 ขั้นตอน"
    ],
    "answer": "4 ขั้นตอน"
  },
  {
    "question": "ข้อใดคือหนึ่งในเทคนิคการเก็บรวบรวมข้อมูล (Fact-Finding Techniques) เพื่อจัดหาความต้องการจากลูกค้าหรือผู้ใช้",
    "options": [
      "การเขียนโค้ด",
      "การสัมภาษณ์",
      "การติดตั้งซอฟต์แวร์",
      "การบำรุงรักษาฐานข้อมูล"
    ],
    "answer": "การสัมภาษณ์"
  },
  {
    "question": "Software Requirement Specification (SRS) คือเอกสารที่ทำหน้าที่ใดเป็นหลัก",
    "options": [
      "เอกสารประกอบการออกแบบระบบ",
      "สัญญาหรือข้อตกลงระหว่างผู้พัฒนากับผู้ว่าจ้างเกี่ยวกับสิ่งที่ระบบควรต้องทำ",
      "รายงานการทดสอบประสิทธิภาพ",
      "แผนการตลาดผลิตภัณฑ์"
    ],
    "answer": "สัญญาหรือข้อตกลงระหว่างผู้พัฒนากับผู้ว่าจ้างเกี่ยวกับสิ่งที่ระบบควรต้องทำ"
  },
  {
    "question": "โครงสร้างเอกสารข้อกำหนดความต้องการ (SRS) ตามมาตรฐาน IEEE มีกี่ส่วนหลัก",
    "options": [
      "3 ส่วน",
      "4 ส่วน",
      "5 ส่วน",
      "6 ส่วน"
    ],
    "answer": "3 ส่วน"
  },
  {
    "question": "ข้อใดคือหนึ่งในหลักเกณฑ์ในการพิจารณาการตรวจสอบความต้องการ (Requirements Validation)",
    "options": [
      "ความซับซ้อน",
      "ความยืดหยุ่น",
      "ความถูกต้อง (Correctness)",
      "ความเข้ากันได้กับฮาร์ดแวร์"
    ],
    "answer": "ความถูกต้อง (Correctness)"
  },
  {
    "question": "กระบวนการทำความเข้าใจและควบคุมการเปลี่ยนแปลงความต้องการที่อาจเกิดขึ้นได้ตลอดเวลา เรียกว่าอะไร",
    "options": [
      "การรวบรวมความต้องการ",
      "การวิเคราะห์ความต้องการ",
      "การตรวจสอบความต้องการ",
      "การจัดการความต้องการ (Requirements Management)"
    ],
    "answer": "การจัดการความต้องการ (Requirements Management)"
  },
  {
    "question": "แบบจำลองใดที่เน้นแสดงปฏิสัมพันธ์ระหว่าง External Entities (Actors) กับระบบเท่านั้น และมีเพียง Process เดียวคือระบบ",
    "options": [
      "Context Diagram (DFD ระดับ 0)",
      "DFD Level 1",
      "DFD Level 2",
      "ER Diagram"
    ],
    "answer": "Context Diagram (DFD ระดับ 0)"
  },
  {
    "question": "สัญลักษณ์รูปวงรีใน BPMN (Business Process Model and Notation) หมายถึงอะไร",
    "options": [
      "Activities",
      "Gateways",
      "Events",
      "Swim lanes"
    ],
    "answer": "Events"
  },
  {
    "question": "ใน BPMN สัญลักษณ์ใดที่ใช้แสดงขอบเขตของผู้เกี่ยวข้อง ซึ่งอาจจะเป็นระบบงานก็ได้ และเมื่อมีหลาย Lane จะเรียกว่า Pool",
    "options": [
      "Flow Objects",
      "Connecting Objects",
      "Swim lanes",
      "Artifacts"
    ],
    "answer": "Swim lanes"
  },
  {
    "question": "ในแบบจำลองแนวทางเชิงวัตถุ (Object-Oriented Approach) วัตถุ (Object) ประกอบด้วยอะไรบ้าง",
    "options": [
      "ฮาร์ดแวร์และซอฟต์แวร์",
      "แผนผังและเอกสาร",
      "ข้อมูล (Properties) และกระบวนการทำงาน (Behavior)",
      "ฟังก์ชันและกระบวนการคำสั่ง"
    ],
    "answer": "ข้อมูล (Properties) และกระบวนการทำงาน (Behavior)"
  },
  {
    "question": "แผนภาพใดใน UML ที่เป็นกลุ่มแผนภาพที่แสดงให้เห็นโครงสร้างเชิงสถิต (Static) ของระบบ",
    "options": [
      "Use Case Diagram",
      "Sequence Diagram",
      "Activity Diagram",
      "Class Diagram"
    ],
    "answer": "Class Diagram"
  },
  {
    "question": "ในแผนภาพยูสเคส (Use Case Diagrams) สัญลักษณ์ใดที่บ่งชี้ว่า Use Case หนึ่ง ต้องเรียกใช้ Use Case อื่นทุกครั้ง",
    "options": [
      "Association",
      "Include",
      "Extend",
      "Generalization"
    ],
    "answer": "Include"
  },
  {
    "question": "ในแผนภาพคลาส (Class Diagram) สิทธิการเข้าถึงข้อมูลภายในแบบใดที่หมายถึง ทุกๆ Object ภายในระบบสามารถเข้าถึงได้",
    "options": [
      "Public (+)",
      "Protected (#)",
      "Private (-)",
      "Internal"
    ],
    "answer": "Public (+)"
  },
  {
    "question": "ในแผนภาพคลาส ความสัมพันธ์แบบใดที่มักถูกมองในรูปของการมีอยู่ (has-a) และ Object จากคลาสหนึ่งมีค่าอ้างอิงไปยัง Object จากคลาสอื่นได้",
    "options": [
      "Generalization relationships",
      "Aggregation relationships",
      "Association relationships",
      "Composition relationships"
    ],
    "answer": "Association relationships"
  },
  {
    "question": "แผนภาพใดที่แสดงให้เห็นถึงการติดต่อไปมาระหว่าง Object/ฟังก์ชันการทำงานในแผนภาพยูสเคส และการส่งผ่านข้อความระหว่างฟังก์ชันการทำงาน",
    "options": [
      "Class Diagram",
      "Activity Diagram",
      "Sequence Diagram",
      "Collaboration Diagram"
    ],
    "answer": "Sequence Diagram"
  },
  {
    "question": "แผนภาพกิจกรรม (Activity Diagram) ใช้เพื่ออธิบายกระแสการไหลของงาน (Workflow) และแสดงขั้นตอนการทำงานของระบบ โดยมีลักษณะคล้ายกับแผนภาพใด",
    "options": [
      "ER Diagram",
      "Flowchart",
      "Use Case Diagram",
      "Class Diagram"
    ],
    "answer": "Flowchart"
  },
  {
    "question": "การออกแบบซอฟต์แวร์ (Software Design) คือกระบวนการใด",
    "options": [
      "การเขียนโปรแกรมด้วยภาษาใดภาษาหนึ่ง",
      "การรวบรวมความต้องการจากลูกค้าเท่านั้น",
      "การกำหนดสถาปัตยกรรม ส่วนประกอบ ส่วนต่อประสาน และลักษณะอื่นๆ ของระบบหรือส่วนประกอบของระบบ",
      "การทดสอบซอฟต์แวร์หลังการติดตั้ง"
    ],
    "answer": "การกำหนดสถาปัตยกรรม ส่วนประกอบ ส่วนต่อประสาน และลักษณะอื่นๆ ของระบบหรือส่วนประกอบของระบบ"
  },
  {
    "question": "ผลลัพธ์ที่ได้จากการออกแบบซอฟต์แวร์คืออะไร ซึ่งจะนำไปใช้สำหรับขั้นตอนของการเขียนโปรแกรม การทดสอบ และการบำรุงรักษาซอฟต์แวร์",
    "options": [
      "แบบจำลองการออกแบบ (Design Model)",
      "เอกสาร SRS",
      "แผนงานโครงการ",
      "รายงานผลกำไรขาดทุน"
    ],
    "answer": "แบบจำลองการออกแบบ (Design Model)"
  },
  {
    "question": "การออกแบบซอฟต์แวร์ที่ดี ควรทำให้ซอฟต์แวร์มีคุณสมบัติใดบ้าง",
    "options": [
      "ซับซ้อนสูงและจัดการยาก",
      "ไม่สามารถนำกลับมาใช้ใหม่ได้",
      "มีคุณภาพ มีความยืดหยุ่น ขยายตัวง่าย บำรุงรักษาง่าย",
      "เคลื่อนย้ายยากและทดสอบยาก"
    ],
    "answer": "มีคุณภาพ มีความยืดหยุ่น ขยายตัวง่าย บำรุงรักษาง่าย"
  },
  {
    "question": "ข้อใดคือหนึ่งใน 4 ประเภทของแบบจำลองการออกแบบ",
    "options": [
      "แบบจำลองความต้องการ",
      "การออกแบบส่วนต่อประสาน (Interface Design)",
      "แบบจำลองข้อมูลเท่านั้น",
      "แบบจำลองกระบวนการเท่านั้น"
    ],
    "answer": "การออกแบบส่วนต่อประสาน (Interface Design)"
  },
  {
    "question": "ปัจจัยที่ทำให้ซอฟต์แวร์มีคุณภาพในมุมมองของการ \"การใช้ผลิตภัณฑ์ (Product Operation)\" ประกอบด้วยกี่ลักษณะ",
    "options": [
      "3 ลักษณะ",
      "4 ลักษณะ",
      "5 ลักษณะ",
      "6 ลักษณะ"
    ],
    "answer": "5 ลักษณะ"
  },
  {
    "question": "ความสามารถในการนำซอฟต์แวร์ไปติดตั้งใช้งานในระบบปฏิบัติการหรือสภาพแวดล้อมที่หลากหลาย (Portability) เป็นหนึ่งในปัจจัยคุณภาพซอฟต์แวร์ด้านใด",
    "options": [
      "การปรับปรุงผลิตภัณฑ์ (Product Revision)",
      "การเปลี่ยนผลิตภัณฑ์ (Product Transition)",
      "การใช้ผลิตภัณฑ์ (Product Operation)",
      "การบำรุงรักษา"
    ],
    "answer": "การเปลี่ยนผลิตภัณฑ์ (Product Transition)"
  },
  {
    "question": "การแยกส่วนประกอบใหม่ หรือการจัดระเบียบมอดูลใหม่ เพื่อให้การออกแบบมอดูลย่อยหรือง่ายขึ้น โดยไม่เปลี่ยนแปลงพฤติกรรมการทำงาน เรียกว่าอะไร",
    "options": [
      "Abstraction",
      "Refinement",
      "Refactoring",
      "Modularity"
    ],
    "answer": "Refactoring"
  },
  {
    "question": "การออกแบบให้มอดูลมีความเป็นอิสระต่อกันภายในมอดูลมีฟังก์ชันทำหน้าที่อย่างเดียว สามารถประเมินได้จากการเกาะกลุ่มกัน (Cohesion) และการพึ่งพากัน (Coupling) นี่คือหลักการออกแบบใด",
    "options": [
      "Information Hiding",
      "Functional Independence",
      "Abstraction",
      "Refinement"
    ],
    "answer": "Functional Independence"
  },
  {
    "question": "ข้อใดคือลักษณะของมอดูลที่ดี",
    "options": [
      "มีการเกาะกลุ่มของฟังก์ชันในมอดูลต่ำ",
      "มีระดับการพึ่งพากันของมอดูลน้อย (Low Coupling)",
      "ทำให้เกิดการแพร่กระจายความผิดพลาดง่าย",
      "ยากต่อการบำรุงรักษาซอฟต์แวร์"
    ],
    "answer": "มีระดับการพึ่งพากันของมอดูลน้อย (Low Coupling)"
  },
  {
    "question": "ผังงาน (Flowchart) ใช้สำหรับอธิบายการทำงานของคำสั่ง โดยมีรูปแบบการทำงานกี่แบบหลัก",
    "options": [
      "1 แบบ",
      "2 แบบ",
      "3 แบบ (เรียงลำดับ, ตัดสินใจ, วนซ้ำ)",
      "4 แบบ"
    ],
    "answer": "3 แบบ (เรียงลำดับ, ตัดสินใจ, วนซ้ำ)"
  },
  {
    "question": "ตารางการตัดสินใจ (Decision Table) ใช้สัญลักษณ์ใดในการเลือกการทำงานหรือกิจกรรมภายใต้เหตุการณ์ของเงื่อนไข",
    "options": [
      "O",
      "I",
      "X",
      "V"
    ],
    "answer": "X"
  },
  {
    "question": "แผนภาพใดที่แสดงถึงระบบสถาปัตยกรรมหรือโครงสร้างของฮาร์ดแวร์หรือซอฟต์แวร์ รวมถึงความสัมพันธ์ระหว่างฮาร์ดแวร์หรือซอฟต์แวร์",
    "options": [
      "แผนภาพคลาส (Class Diagram)",
      "แผนภาพส่วนประกอบ (Component Diagram)",
      "แผนภาพ Deployment (Deployment Diagram)",
      "แผนภาพลำดับการทำงาน (Sequence Diagram)"
    ],
    "answer": "แผนภาพ Deployment (Deployment Diagram)"
  },
  {
    "question": "กลยุทธ์ในการออกแบบซอฟต์แวร์แบบใดที่เป็นวิธีการพิจารณาถึงฟังก์ชันของซอฟต์แวร์เป็นเกณฑ์ในการแบ่งซอฟต์แวร์ออกเป็นส่วนย่อย",
    "options": [
      "การออกแบบเชิงวัตถุ (Object-oriented Design)",
      "การออกแบบโดยใช้ข้อมูลเป็นศูนย์กลาง (Data-structure Centered Design)",
      "การออกแบบเชิงฟังก์ชัน (Function-Oriented Design)",
      "การออกแบบคอมโพเนนท์ (Component-base Design: CBD)"
    ],
    "answer": "การออกแบบเชิงฟังก์ชัน (Function-Oriented Design)"
  },
  {
    "question": "การออกแบบโดยใช้ข้อมูลเป็นศูนย์กลาง (Data-structure Centered Design) เริ่มต้นจากการแสดงโครงสร้างข้อมูล โดยอาจสร้างเป็นแผนภาพใดเพื่อจำลองโครงสร้างของข้อมูล",
    "options": [
      "DFD",
      "Use Case Diagram",
      "Jackson Structure Diagram",
      "Activity Diagram"
    ],
    "answer": "Jackson Structure Diagram"
  },
  {
    "question": "ข้อใดคือประโยชน์หลักของการออกแบบคอมโพเนนท์ (Component-base Design: CBD)",
    "options": [
      "ทำให้ซอฟต์แวร์มีขนาดใหญ่ขึ้น",
      "ลดการสื่อสารระหว่างคอมโพเนนท์",
      "เพื่อตอบสนองความต้องการผลิตซอฟต์แวร์ที่สามารถนำกลับมาใช้ใหม่ได้",
      "ทำให้แต่ละคอมโพเนนท์ไม่สามารถทำงานร่วมกันได้"
    ],
    "answer": "เพื่อตอบสนองความต้องการผลิตซอฟต์แวร์ที่สามารถนำกลับมาใช้ใหม่ได้"
  }
]